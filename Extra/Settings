    local settings = Window:AddTab("Settings"); do 
        local theme_section = settings:AddSection("Theme", 1); do
            local theme_strings = {"Custom"};
            for _, v in next, Library.themes do
                table.insert(theme_strings, v.name);
            end;
            local setByPreset = false;

            theme_section:AddList({text = "Themes", flag = "preset_theme", values = theme_strings, callback = function(new_theme)
                if new_theme == "Custom" then return end
                setByPreset = true
                for _,v in next, Library.themes do
                    if v.name == new_theme then
                        for x, d in pairs(Library.options) do
                            if v.theme[tostring(x)] ~= nil then
                                d:SetColor(v.theme[tostring(x)]);
                            end;
                        end;
                        library:SetTheme(v.theme);
                        break;
                    end;
                end;
                setByPreset = false
            end}):Select("Default");
        
            for i, v in pairs(Library.theme) do
                theme_section:AddColor({text = i, flag = i, color = Library.theme[i], callback = function(c3)
                    Library.theme[i] = c3;
                    Library:SetTheme(Library.theme);
                    if not setByPreset and not setByConfig then 
                        Options.preset_theme:Select("Custom");
                    end;
                end});
            end;
        end;
        -- 
        local configuration_section = settings:AddSection("Configuration", 2); do
            function refresh_configs()
                Options.selected_config:ClearValues();
                for _,v in next, listfiles(Library.cheatname .."/" .. Library.gamename .. "/configs") do
                    local ext = "."..v:split(".")[#v:split(".")];
                    if ext == Library.fileext then
                        Options.selected_config:AddValue(v:split("\\")[#v:split("\\")]:sub(1,-#ext-1))
                    end
                end
            end
        
            configuration_section:AddBox({text = "Config Name", flag = "confignameinput"})
            configuration_section:AddList({text = "Config", flag = "selected_config"})
            configuration_section:AddButton({text = "Load", confirm = false, callback = function()
                library:LoadConfig(flags.selected_config);
            end});
            configuration_section:AddButton({text = "Save", confirm = false, callback = function()
                library:SaveConfig(flags.selected_config);
            end});
            configuration_section:AddButton({text = "Create", confirm = false, callback = function()
                if library:GetConfig(flags.configinput) then
                    library:SendNotification("Config \""..flags.confignameinput.."\" already exists.", 5, c3new(1,0,0));
                    return
                end
                writefile(Library.cheatname.."/"..Library.gamename.."/configs/"..flags.configinput.. Library.fileext, http:JSONEncode({}));
                refresh_configs();
            end})
            configuration_section:AddButton({text = "Delete", confirm = false, callback = function()
                if library:GetConfig(flags.selectedconfig) then
                    delfile(Library.cheatname.."/"..Library.gamename.."/configs/"..flags.selectedconfig.. Library.fileext);
                    refresh_configs();
                end;
            end});
            configuration_section:AddButton({text = "Refresh", callback = function()
                refresh_configs();
            end});
            refresh_configs();
        end;
        --
        local scripts_section = settings:AddSection("Scripts", 2); do
            function refresh_scripts()
                Options.selected_script:ClearValues();
                for _,v in next, listfiles(Library.cheatname .."/" .. Library.gamename .. "/scripts") do
                    local ext = "."..v:split(".")[#v:split(".")];
                    if ext == ".lua" then
                        Options.selected_script:AddValue(v:split("\\")[#v:split("\\")]:sub(1,-#ext-1))
                    end
                end
            end
        
            scripts_section:AddList({text = "Script", flag = "selected_script"})
            scripts_section:AddButton({text = "Load", confirm = false, callback = function()
                loadfile(Library.cheatname.."/"..Library.gamename.."/scripts/"..flags.selected_script.. ".lua")();
            end});
            scripts_section:AddButton({text = "Delete", confirm = false, callback = function()
                if library:GetConfig(flags.selected_script) then
                    delfile(Library.cheatname.."/"..Library.gamename.."/scripts/"..flags.selected_script.. ".lua");
                    refresh_scripts();
                end;
            end});
            scripts_section:AddButton({text = "Refresh", callback = function()
                refresh_scripts();
            end});
            refresh_scripts();
        end;
        -- 
        local main_section = settings:AddSection("Main", 2); do
            main_section:AddBind({text = "Open / Close", flag = "togglebind", nomouse = true, noindicator = true, bind = Enum.KeyCode.End, callback = function()
                library:SetOpen(not Library.open)
            end});
            main_section:AddButton({text = "Copy Server Connect Script", callback = function()
                setclipboard(([[game:GetService("TeleportService"):TeleportToPlaceInstance(%s, "%s")]]):format(game.PlaceId, game.JobId));
            end});
            main_section:AddButton({text = "Rejoin Game", confirm = true, callback = function()
                game:GetService("TeleportService"):Teleport(game.PlaceId);
            end})
            main_section:AddButton({text = "Unload", callback = function()
                Library:Unload()
                end});
        return settings
    end
end
